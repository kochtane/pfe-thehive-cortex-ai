## SECRET KEY
#
# The secret key is used to secure cryptographic functions.
#
# IMPORTANT: If you deploy your application to several  instances,  make
# sure to use the same key.
#play.http.secret.key="CortexTestPassword"
play.http.secret.key=<secret>

## ElasticSearch
search {
  index = cortex
  uri = <cortex-url>
}

## Cache
cache.job = 10 minutes

job {
  runner = [process]
}

## ANALYZERS
analyzer {
  urls = [
    "https://download.thehive-project.org/analyzers.json"
    #"/absolute/path/of/analyzers"
  ]
}

# RESPONDERS
responder {
  urls = [
    "https://download.thehive-project.org/responders.json" ,
    "/opt/cortex/responders"
    #"/absolute/path/of/responders"
  ]
  
  # Allow responders to access environment variables
  env_passthrough = ["OPENAI_API_KEY", "OPENAI_MODEL", "THEHIVE_URL", "THEHIVE_API_KEY", "AI_DEBUG", "AI_TIMEOUT"]
  
  # Enhanced Suricata IP Blocker Configuration (now with AI capabilities)
  SuricataIPBlocker {
    # Original configuration (kept for backward compatibility)
    suricata_container = "suricata-monitor"
    block_duration_hours = 24
    max_blocked_ips = 1000
    
    # New AI Configuration
    ai_enabled = true
    ai_model = ${?OPENAI_MODEL}
    ai_timeout = ${?AI_TIMEOUT}
    ai_debug = ${?AI_DEBUG}
    
    # AI Decision thresholds
    ai_confidence_threshold = 0.7
    ai_block_threshold = 0.8
    
    # Fallback behavior when AI is unavailable
    fallback_to_rules = true
    fallback_block_critical = true
    
    # Target configuration
    target_port = "8081"
  }
  
  # DNS Attack Responder (kept as-is)
  DNSAttackResponder {
    suricata_container = "suricata-monitor"
    block_duration_hours = 24
    max_blocked_ips = 1000
  }
}

## AI Configuration Section
ai {
  # Global AI settings
  enabled = true
  provider = "openai"
  
  # Model configuration
  default_model = ${?OPENAI_MODEL}
  fallback_model = "gpt-3.5-turbo"
  
  # Request settings
  timeout = ${?AI_TIMEOUT}
  max_retries = 3
  retry_delay = 2
  
  # Cost control
  max_tokens_per_request = 500
  daily_request_limit = 1000
  
  # Debug and logging
  debug = ${?AI_DEBUG}
  log_requests = ${?AI_DEBUG}
  log_responses = ${?AI_DEBUG}
  
  # Rate limiting
  requests_per_minute = 60
  requests_per_hour = 500
  
  # Context configuration for Orange Tunisie
  context {
    organization = "Orange Tunisie"
    industry = "Telecommunications"
    infrastructure_type = "Critical"
    compliance_requirements = ["ANSI", "ISO27001"]
    business_hours = "08:00-18:00"
    timezone = "Africa/Tunis"
  }
}

## Enhanced Logging for AI Operations
akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  logger-startup-timeout = 30s
}

# Custom logging configuration for AI responders
logger {
  ai_responders = "INFO"
  openai_client = ${?AI_DEBUG}
  threat_analysis = "INFO"
}

## Security Configuration
security {
  # API key validation
  validate_api_keys = true
  mask_api_keys_in_logs = true
  
  # Network security
  allowed_ai_endpoints = [
    "api.openai.com",
    "*.openai.com"
  ]
}

## Performance Configuration
performance {
  # AI request settings
  ai_connection_pool_size = 5
  ai_connection_timeout = 30
  max_concurrent_ai_requests = 3
  
  # Resource limits
  ai_memory_limit = "256MB"
}
